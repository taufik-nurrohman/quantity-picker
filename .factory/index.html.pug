extends _index.pug

block state
  - const scripts = ['index.min.js']
  - const styles = ['../layout/index.min.css', '../layout/anchor/index.min.css', 'index.min.css']
  - const theme = '#000'
  - const title = 'Quantity Picker ' + version

block script
  script
    | const picker = new QuantityPicker(document.forms[0].quantity);
    |
    | picker.on('change', value => console.log(value));

block style
  style
    | body {
    |   margin-left: auto;
    |   margin-right: auto;
    |   max-width: 60rem;
    | }
    | .quantity-picker {
    |   background: #fff;
    |   border-width: 2px;
    |   color: #000;
    |   min-width: 4em;
    | }
    | .quantity-picker:focus-within {
    |   border-color: #00f;
    | }
    | .quantity-picker[aria-invalid='true'] {
    |   background: rgba(255, 0, 0, 0.125);
    |   border-color: #f00;
    |   color: #000;
    | }
    | .quantity-picker__flex {
    |   gap: 2px;
    |   padding: 2px;
    | }
    | .quantity-picker__step-down,
    | .quantity-picker__step-up,
    | .quantity-picker__text {
    |   border-width: 0;
    |   padding: 0 0.5em;
    | }
    | .quantity-picker__step-down::after {
    |   margin-bottom: 4px;
    | }
    | .quantity-picker__step-up::after {
    |   margin-top: 4px;
    | }
    | .quantity-picker__step-down:focus,
    | .quantity-picker__step-up:focus {
    |   color: #00f;
    |   outline: 0;
    | }
    | .quantity-picker[aria-invalid='true'] .quantity-picker__step-down:focus,
    | .quantity-picker[aria-invalid='true'] .quantity-picker__step-up:focus {
    |   color: #f00;
    | }

block content
  p(role='alert') Do you like this project? Please support my #[a(href='https://github.com/mecha-cms') Mecha CMS] project too. Thank you!
  header
    hgroup
      h1= title
      p A #[a(href='../number-picker') number picker] variant for quantity.
    p Use #[kbd ArrowUp] key to increase the number and #[kbd ArrowDown] key to decrease it. You can also use your mouse wheel for this.
  main
    form(method='get' target='_blank')
      p(role='group')
        input(max='100' min='0' name='quantity' placeholder='0' step='1' type='number')
        = ' '
        button(type='submit') Submit
        = ' '
        button(type='reset') Reset
    h2#usage
      a(aria-hidden='true' href='#usage') #
      = ' Usage'
    h3#browser
      a(aria-hidden='true' href='#browser') #
      = ' Browser'
    pre: code
      | &lt;!DOCTYPE html&gt;
      | &lt;html dir="ltr"&gt;
      |   &lt;head&gt;
      |     &lt;meta charset="utf-8"&gt;
      |     &lt;link href="#[a(href='index.min.css' target='_blank') ./index.min.css]" rel="stylesheet"&gt;
      |     &lt;style&gt;
      |       .quantity-picker {
      |         min-width: 3em;
      |       }
      |     &lt;/style&gt;
      |   &lt;/head&gt;
      |   &lt;body&gt;
      |     &lt;p&gt;
      |       &lt;input min="0" step="1" type="number"&gt;
      |     &lt;/p&gt;
      |     &lt;script src="#[a(href='index.min.js' target='_blank') ./index.min.js]"&gt;&lt;/script&gt;
      |     &lt;script&gt;
      |       const picker = new QuantityPicker(document.querySelector('input'));
      |     &lt;/script&gt;
      |   &lt;/body&gt;
      | &lt;/html&gt;
    h3#node-js
      a(aria-hidden='true' href='#node-js') #
      = ' Node.js'
    p Functions and methods in this application are mostly native JavaScript and are intended for use by the browser. Node.js doesn’t know about the DOM, so this kind of practice will probably be used more often to build new browser packages than to be used directly in the Node.js server.
    h4#cjs
      a(aria-hidden='true' href='#cjs') #
      = ' CommonJS'
    pre: code
      | const QuantityPicker = require('@taufik-nurrohman/quantity-picker').default;
      |
      | const picker = new QuantityPicker(document.querySelector('input'));
    h4#mjs
      a(aria-hidden='true' href='#mjs') #
      = ' ECMAScript'
    pre: code
      | import QuantityPicker from '@taufik-nurrohman/quantity-picker';
      |
      | const picker = new QuantityPicker(document.querySelector('input'));
    h2#tests
      a(aria-hidden='true' href='#tests') #
      = ' Tests'
    ul
      li: a(href='test.html' target='_blank') No Idea?
      li: a(href='test/attach,detach.html' target='_blank') Attach, Detach
      li: a(href='test/disabled.html' target='_blank') Disabled State
      li: a(href='test/focus.html' target='_blank') Focus Automatically
      li: a(href='test/read-only.html' target='_blank') Read-Only State
      li: a(href='test/required.html' target='_blank') Required State
      li: a(href='test/step.html' target='_blank') Step
      li: a(href='test/strict.html' target='_blank') Strict
    h2#constructors
      a(aria-hidden='true' href='#constructors') #
      = ' Constructors'
    h3#constructor-quantity-picker
      a(aria-hidden='true' href='#constructor-quantity-picker') #
      = ' '
      code QuantityPicker(self, state)
    pre: code
      | const picker = new QuantityPicker(self, strict = true);
    pre: code
      | const picker = new QuantityPicker(self, state = {
      |     max: Infinity,
      |     min: 0,
      |     step: 1,
      |     strict: true,
      |     time: {
      |         error: 1000,
      |         repeat: [500, 50]
      |     },
      |     with: []
      | });
    h2#parameters
      a(aria-hidden='true' href='#parameters') #
      = ' Parameters'
    h3#parameter-self
      a(aria-hidden='true' href='#parameter-self') #
      = ' '
      code self
    p The #[code &lt;input&gt;] element.
    h3#parameter-strict
      a(aria-hidden='true' href='#parameter-strict') #
      = ' '
      code strict
    p If its value is set to #[code true], any invalid input will be rejected immediately. Increasing the number will automatically stop at the maximum number, and decreasing the number will automatically stop at the minimum number.
    h3#parameter-state
      a(aria-hidden='true' href='#parameter-state') #
      = ' '
      code state
    p The configuration data.
    h4#parameter-state-max
      a(aria-hidden='true' href='#parameter-state-max') #
      = ' '
      code state.max
    p Determines the maximum valid number value, with the default value follows what the #[code max] attribute value of the #[code &lt;input&gt;] element. If no #[code max] attribute exists or if its value is not a number, it will default to #[code Infinity].
    pre: code
      | const picker = new QuantityPicker(document.querySelector('input'), {
      |     max: 25
      | });
    h4#parameter-state-min
      a(aria-hidden='true' href='#parameter-state-min') #
      = ' '
      code state.min
    p Determines the minimum valid number value, with the default value follows what the #[code min] attribute value of the #[code &lt;input&gt;] element. If no #[code min] attribute exists or if its value is not a number, it will default to #[code 0].
    pre: code
      | const picker = new QuantityPicker(document.querySelector('input'), {
      |     min: 5
      | });
    h4#parameter-state-step
      a(aria-hidden='true' href='#parameter-state-step') #
      = ' '
      code state.step
    p Determines how much the number will increase or decrease with each step, with the default value follows what the #[code step] attribute value of the #[code &lt;input&gt;] element. If no #[code step] attribute exists or if its value is not an integer, it will default to #[code 1].
    pre: code
      | const picker = new QuantityPicker(document.querySelector('input'), {
      |     step: 5
      | });
    h4#parameter-state-strict
      a(aria-hidden='true' href='#parameter-state-strict') #
      = ' '
      code state.strict
    p If its value is set to #[code true], any invalid input will be rejected immediately. Increasing the number will automatically stop at the maximum number, and decreasing the number will automatically stop at the minimum number.
    pre: code
      | const picker = new QuantityPicker(document.querySelector('input'), {
      |     strict: true
      | });
    h4#parameter-state-time
      a(aria-hidden='true' href='#parameter-state-time') #
      = ' '
      code state.time
    p Stores configuration data related to time in milliseconds.
    h5#parameter-state-time-error
      a(aria-hidden='true' href='#parameter-state-time-error') #
      = ' '
      code state.time.error
    p Determines how long the invalid state is presented to the user. If the value is less than or equal to #[code 0], the built-in invalid state will be disabled.
    pre: code
      | const picker = new QuantityPicker(document.querySelector('input'), {
      |     time: {
      |         error: 999999999 // As long as possible
      |     }
      | });
    pre: code
      | const picker = new QuantityPicker(document.querySelector('input'), {
      |     time: {
      |         error: 0 // Disable the built-in invalid state
      |     }
      | });
    h5#parameter-state-time-repeat
      a(aria-hidden='true' href='#parameter-state-time-repeat') #
      = ' '
      code state.time.repeat
    p It contains an array that determines how long the step button must be held down before the increase/decrease action starts to repeat.
    pre: code
      | const picker = new QuantityPicker(document.querySelector('input'), {
      |     time: {
      |         repeat: [
      |             // Start the repeat by holding down the step button for one second
      |             1000,
      |             // Repeat every 1 second
      |             1000
      |         ]
      |     }
      | });
    h4#parameter-state-with
      a(aria-hidden='true' href='#parameter-state-with') #
      = ' '
      code state.with
    p List of #[a(href='#anatomy-of-an-extension') callable functions or objects containing an #[code attach()] method] to be invoked each time the application is initialized. A very simple “plugin” system.
    h2#methods
      a(aria-hidden='true' href='#methods') #
      = ' Methods'
    h3#instance-methods
      a(aria-hidden='true' href='#instance-methods') #
      = ' Instance Methods'
    p Instance methods are methods available through the results of an #[a(href='#constructor-quantity-picker') #[code QuantityPicker]] construct.
    h4#instance-method-attach
      a(aria-hidden='true' href='#instance-method-attach') #
      = ' '
      code picker.attach(self, state)
    p Re-initializes the application and its #[a(href='#extensions') extensions] after it has been detached.
    pre: code
      | picker.attach();
    h4#instance-method-blur
      a(aria-hidden='true' href='#instance-method-blur') #
      = ' '
      code picker.blur()
    p Blurs from the quantity picker’s input.
    pre: code
      | picker.blur();
    h4#instance-method-detach
      a(aria-hidden='true' href='#instance-method-detach') #
      = ' '
      code picker.detach()
    p Removes the application view and executes the #[code detach()] method of the #[a(href='#extensions') extensions], if they are present.
    pre: code
      | picker.detach();
    h4#instance-method-fire
      a(aria-hidden='true' href='#instance-method-fire') #
      = ' '
      code picker.fire(event, data, that)
    p Fires an event.
    pre: code
      | picker.fire('change', []);
    h4#instance-method-focus
      a(aria-hidden='true' href='#instance-method-focus') #
      = ' '
      code picker.focus(mode = true)
    p Focuses to the quantity picker’s input.
    pre: code
      | picker.focus(); // Focus and select the text
      | picker.focus(-1); // Focus and put the caret to the start of the text
      | picker.focus(+1); // Focus and put the caret to the end of the text
    h4#instance-method-off
      a(aria-hidden='true' href='#instance-method-off') #
      = ' '
      code picker.off(event, task)
    p Removes an event.
    pre: code
      | picker.off('change'); // Remove all events from the `change` event container
      | picker.off('change', onChange); // Remove `onChange` event from the `change` event container
    h4#instance-method-on
      a(aria-hidden='true' href='#instance-method-on') #
      = ' '
      code picker.on(event, task)
    p Adds a new event.
    pre: code
      | picker.on('change', function () {
      |     console.log(this.value);
      | });
    pre: code
      | function onChange() {
      |     console.log(this.value);
      | }
      |
      | picker.on('change', onChange);
    h4#instance-method-reset
      a(aria-hidden='true' href='#instance-method-reset') #
      = ' '
      code picker.reset(focus, mode = true)
    p Resets the quantity picker’s value to its initial value.
    pre: code
      | picker.reset(); // Reset the quantity picker’s value
      | picker.reset(true); // Reset the quantity picker’s value and focus to the quantity picker’s input
    h3#static-methods
      a(aria-hidden='true' href='#static-methods') #
      = ' Static Methods'
    p Static methods are methods available directly on the #[a(href='#constructor-quantity-picker') #[code QuantityPicker]] object.
    h4#static-method-from
      a(aria-hidden='true' href='#static-method-from') #
      = ' '
      code QuantityPicker.from(self, state)
    p Creates a new #[a(href='#constructor-quantity-picker') #[code QuantityPicker]] instance.
    pre: code
      | const picker = QuantityPicker.from(document.querySelector('input'));
    h4#static-method-of
      a(aria-hidden='true' href='#static-method-of') #
      = ' '
      code QuantityPicker.of(self)
    p Gets #[a(href='#constructor-quantity-picker') #[code QuantityPicker]] instance of an element.
    pre: code
      | document.querySelectorAll('input').forEach(self =&gt; {
      |     const picker = QuantityPicker.of(self);
      | });
    h2#properties
     a(aria-hidden='true' href='#properties') #
     = ' Properties'
    h3#instance-properties
      a(aria-hidden='true' href='#instance-properties') #
      = ' Instance Properties'
    p Instance properties are properties available through the results of an #[a(href='#constructor-quantity-picker') #[code QuantityPicker]] construct.
    h4#instance-property-active
      a(aria-hidden='true' href='#instance-property-active') #
      = ' '
      code picker.active
    p Gets or sets the active state of the quantity picker. By setting the value to #[code false] or #[code true], the disabled state of the source element will also be set automatically.
    pre: code
      | picker.active = false; // // Make the quantity picker “disabled”
      | picker.active = true; // // Make the quantity picker “enabled”
    h4#instance-property-fix
      a(aria-hidden='true' href='#instance-property-fix') #
      = ' '
      code picker.fix
    p Gets or sets the read-only state of the quantity picker. By setting the value to #[code false] or #[code true], the read-only state of the source element will also be set automatically.
    pre: code
      | picker.fix = true; // Make the quantity picker “read-only”
    h4#instance-property-hooks
      a(aria-hidden='true' href='#instance-property-hooks') #
      = ' '
      code picker.hooks
    p Returns the events data.
    pre: code
      | console.log(picker.hooks);
    h4#instance-property-mask
      a(aria-hidden='true' href='#instance-property-mask') #
      = ' '
      code picker.mask
    p Returns the quantity picker’s mask.
    pre: code
      | picker.mask.classList.add(picker.state.n + '--dark');
    h4#instance-property-max
      a(aria-hidden='true' href='#instance-property-max') #
      = ' '
      code picker.max
    p Proxy that passes to the #[a(href='#parameter-state-max') #[code picker.state.max]] property, with additional actions that are executed while the value is being set.
    pre: code
      | console.log(picker.max); // Returns the `picker.state.max` value
    pre: code
      | picker.max = 5; // Set the maximum valid number to `5`
    h4#instance-property-min
      a(aria-hidden='true' href='#instance-property-min') #
      = ' '
      code picker.min
    p Proxy that passes to the #[a(href='#parameter-state-min') #[code picker.state.min]] property, with additional actions that are executed while the value is being set.
    pre: code
      | console.log(picker.min); // Returns the `picker.state.min` value
    pre: code
      | picker.min = 5; // Set the minimum valid number to `5`
    h4#instance-property-self
      a(aria-hidden='true' href='#instance-property-self') #
      = ' '
      code picker.self
    p Returns the #[code &lt;input&gt;] element.
    pre: code
      | console.log(picker.self.getAttribute('name'));
    h4#instance-property-state
      a(aria-hidden='true' href='#instance-property-state') #
      = ' '
      code picker.state
    p Returns the application states if any.
    pre: code
      | console.log(picker.state);
    h4#instance-property-text
      a(aria-hidden='true' href='#instance-property-text') #
      = ' '
      code picker.text
    p Gets or sets the current text of the quantity picker’s input.
    pre: code
      | console.log(picker.text);
    pre: code
      | picker.text = '5';
    h4#instance-property-value
      a(aria-hidden='true' href='#Instance-property-value') #
      = ' '
      code picker.value
    p Proxy that passes to the #[a(href='#instance-property-self') #[code picker.self.value]] property, with additional actions that are executed while the value is being set.
    pre: code
      | console.log(picker.value);
    pre: code
      | picker.on('change', function () {
      |     console.log(this.value);
      | });
      |
      | picker.value = '5';
    h4#instance-property-vital
      a(aria-hidden='true' href='#instance-property-vital') #
      = ' '
      code picker.vital
    p Gets or sets the required state of the quantity picker. By setting the value to #[code false] or #[code true], the required state of the source element will also be set automatically.
    pre: code
      | picker.vital = true; // Make the quantity picker “required”
    h3#static-properties
      a(aria-hidden='true' href='#static-properties') #
      = ' Static Properties'
    p Static properties are properties available directly on the #[a(href='#constructor-quantity-picker') #[code QuantityPicker]] object.
    h4#static-property-prototype
      a(aria-hidden='true' href='#static-property-prototype') #
      = ' '
      code QuantityPicker._
    p Alias for #[code QuantityPicker.prototype].
    pre: code
      | QuantityPicker._.clear = function () {
      |     return (this.value = ""), this;
      | };
      |
      | const picker = new QuantityPicker(document.querySelector('input'));
      |
      | picker.clear(); // Clear value
    h4#static-property-state
      a(aria-hidden='true' href='#static-property-state') #
      = ' '
      code QuantityPicker.state
    p Returns the default values of #[a(href='#instance-property-state') #[code picker.state]].
    pre: code
      | const picker = new QuantityPicker(document.querySelector('input'), {
      |     foo: 'bar'
      | });
      |
      | console.log([QuantityPicker.state, picker.state]);
    h4#static-property-version
      a(aria-hidden='true' href='#static-property-version') #
      = ' '
      code QuantityPicker.version
    p Returns the application version.
    h2#extensions
      a(aria-hidden='true' href='#extensions') #
      = ' Extensions'
    h3#anatomy-of-an-extension
      a(aria-hidden='true' href='#anatomy-of-an-extension') #
      = ' Anatomy of an Extension'
    p Extension as a function:
    pre: code
      | function Extension(self, state = {}) {
      |     this.test = 1;
      |     return this;
      | }
      |
      | Object.defineProperty(Extension, 'name', {
      |     value: 'Extension'
      | });
    p Extension as an object:
    pre: code
      | const Extension = {
      |     attach: function (self, state = {}) {
      |         this.test = 1;
      |         return this;
      |     },
      |     detach: function (self, state = {}) {
      |         delete this.test;
      |         return this;
      |     },
      |     name: 'Extension'
      | };
    h3#usage-of-an-extension
      a(aria-hidden='true' href='#usage-of-an-extension') #
      = ' Usage of an Extension'
    p As a core extension:
    pre: code
      | QuantityPicker.state.with.push(Extension);
    p As an optional extension:
    pre: code
      | const picker = new QuantityPicker(document.querySelector('input'), {
      |     with: [Extension]
      | });
    h3#list-of-extensions
      a(aria-hidden='true' href='#list-of-extensions') #
      = ' List of Extensions'
    ul
      li: a(aria-disabled='true') Hex
    h2#license
      a(aria-hidden='true' href='#license') #
      = ' License'
    p This project is licensed under the terms of the #[a(href='LICENSE') MIT] license. If this project has saved you time, please #[a(href='https://paypal.me/tatautaufik' target='_blank') donate]. Thank you! ❤️
  footer
    hr
    p
      != '© ' + year + ' '
      a(href='/') Taufik Nurrohman